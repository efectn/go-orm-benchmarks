// Code generated by queryx, DO NOT EDIT.

package db

import (
	"database/sql"
	"errors"
	"fmt"

	"github.com/efectn/go-orm-benchmarks/bench/queryx/db/queryx"
)

type ModelQuery struct {
	adapter         *queryx.Adapter
	schema          *queryx.Schema
	queries         Queries
	selectStatement *queryx.SelectStatement
	preload         map[string]bool
	err             error
}

func NewModelQuery(adapter *queryx.Adapter, schema *queryx.Schema, queries Queries) *ModelQuery {
	s := queryx.NewSelect().Select("models.*").From("models")
	return &ModelQuery{
		adapter:         adapter,
		schema:          schema,
		queries:         queries,
		selectStatement: s,
		preload:         make(map[string]bool),
	}
}

func (q *ModelQuery) Create(change *queryx.ModelChange) (*Model, error) {
	if q.err != nil {
		return nil, q.err
	}

	record := &Model{
		schema:  q.schema,
		queries: q.queries,
	}
	columns, values := change.Changes()
	query, args := queryx.NewInsert().
		Into("models").
		Columns(columns...).
		Values(values...).
		Returning("*").ToSQL()
	fmt.Println(query)
	err := q.adapter.QueryOne(query, args...).Scan(record)
	if err != nil {
		return nil, err
	}

	return record, nil
}

func (q *ModelQuery) InsertAll(changes []*queryx.ModelChange) (int64, error) {
	if q.err != nil {
		return 0, q.err
	}

	if len(changes) == 0 {
		return 0, ErrInsertAllEmptyChanges
	}

	s := queryx.NewInsert().Into("models")
	for i, change := range changes {
		columns, values := change.Changes()
		if i == 0 {
			s.Columns(columns...)
		}
		s.Values(values...)
	}

	query, args := s.ToSQL()
	return q.adapter.Exec(query, args...)
}

func (q *ModelQuery) Delete(id int64) (int64, error) {
	query, args := queryx.NewDelete().From("models").Where(q.schema.ModelID.EQ(id)).ToSQL()
	result, err := q.adapter.Exec(query, args...)
	if err != nil {
		return 0, err
	}
	return result, err
}

func (q *ModelQuery) Find(id int64) (*Model, error) {
	res, err := q.Where(q.schema.ModelID.EQ(id)).First()
	if err != nil {
		return nil, err
	}
	if res == nil {
		return nil, sql.ErrNoRows
	}
	res.schema = q.schema
	res.queries = q.queries
	return res, err
}

func (q *ModelQuery) FindBy(where *queryx.Clause) (*Model, error) {
	return q.Where(where).First()
}

func (q *ModelQuery) FindBySQL(query string, args ...interface{}) ([]*Model, error) {
	var modelList []Model
	models := make([]*Model, 0)
	err := q.adapter.Query(query, args...).Scan(&modelList)
	if err != nil {
		return nil, err
	}
	for i := 0; i < len(modelList); i++ {
		models = append(models, &modelList[i])
	}
	return models, nil
}

func (q *ModelQuery) Where(clauses ...*queryx.Clause) *ModelQuery {
	q.selectStatement.Where(clauses...)
	return q
}

func (q *ModelQuery) Select(selection ...string) *ModelQuery {
	q.selectStatement.Select(selection...)
	return q
}

func (q *ModelQuery) Limit(limit int) *ModelQuery {
	q.selectStatement.Limit(limit)
	return q
}

func (q *ModelQuery) Offset(offset int) *ModelQuery {
	q.selectStatement.Offset(offset)
	return q
}

func (q *ModelQuery) Group(group string) *ModelQuery {
	q.selectStatement.GroupBy(group)
	return q
}

func (q *ModelQuery) Having(having string) *ModelQuery {
	q.selectStatement.Having(having)
	return q
}

func (q *ModelQuery) Joins(joins string) *ModelQuery {
	q.selectStatement.Join(joins)
	return q
}

func (q *ModelQuery) Order(order ...string) *ModelQuery {
	q.selectStatement.Order(order...)
	return q
}

func (q *ModelQuery) All() ([]*Model, error) {
	if q.err != nil {
		return nil, q.err
	}
	var rows []Model
	models := make([]*Model, 0)
	query, args := q.selectStatement.ToSQL()
	err := q.adapter.Query(query, args...).Scan(&rows)
	if err != nil {
		return nil, err
	}

	if len(rows) == 0 {
		return models, nil
	}

	for i := range rows {
		rows[i].schema = q.schema
		rows[i].queries = q.queries
		models = append(models, &rows[i])
	}

	return models, nil
}

func (q *ModelQuery) First() (*Model, error) {
	q.Limit(1)
	results, err := q.All()
	if err != nil {
		return nil, err
	}
	if len(results) > 0 {
		return results[0], nil
	}

	return nil, nil
}

func (q *ModelQuery) Count() (int64, error) {
	var res struct {
		Count int64 `db:"count"`
	}
	q.selectStatement.Select("count(*)")
	query, args := q.selectStatement.ToSQL()
	if err := q.adapter.QueryOne(query, args...).Scan(&res); err != nil {
		return 0, err
	}

	return res.Count, nil
}

func (q *ModelQuery) Avg(v string) (float64, error) {
	var res struct {
		Avg sql.NullFloat64 `db:"avg"`
	}
	q.selectStatement.Select(fmt.Sprintf("avg(%+v)", v))
	query, args := q.selectStatement.ToSQL()
	if err := q.adapter.QueryOne(query, args...).Scan(&res); err != nil {
		return 0, err
	}

	return res.Avg.Float64, nil
}

func (q *ModelQuery) Sum(v string) (float64, error) {
	var res struct {
		Sum sql.NullFloat64 `db:"sum"`
	}
	q.selectStatement.Select(fmt.Sprintf("sum(%+v)", v))
	query, args := q.selectStatement.ToSQL()
	if err := q.adapter.QueryOne(query, args...).Scan(&res); err != nil {
		return 0, err
	}

	return res.Sum.Float64, nil
}

func (q *ModelQuery) Max(v string) (float64, error) {
	var res struct {
		Max sql.NullFloat64 `db:"max"`
	}
	q.selectStatement.Select(fmt.Sprintf("max(%+v)", v))
	query, args := q.selectStatement.ToSQL()
	if err := q.adapter.QueryOne(query, args...).Scan(&res); err != nil {
		return 0, err
	}

	return res.Max.Float64, nil
}

func (q *ModelQuery) Min(v string) (float64, error) {
	var res struct {
		Min sql.NullFloat64 `db:"min"`
	}
	q.selectStatement.Select(fmt.Sprintf("min(%+v)", v))
	query, args := q.selectStatement.ToSQL()
	if err := q.adapter.QueryOne(query, args...).Scan(&res); err != nil {
		return 0, err
	}

	return res.Min.Float64, nil
}

func (q *ModelQuery) Exists() (bool, error) {
	q.selectStatement.Select("1 AS one").Limit(1)
	// select 1 as one from users limit 1
	query, args := q.selectStatement.ToSQL()
	var res struct {
		One int64 `db:"one"`
	}
	if err := q.adapter.QueryOne(query, args...).Scan(&res); err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return false, nil
		}
		return false, err
	}

	return res.One == 1, nil
}

func (q *ModelQuery) UpdateAll(change *queryx.ModelChange) (int64, error) {
	if q.err != nil {
		return 0, q.err
	}
	columns, values := change.Changes()
	query, args := q.selectStatement.Update().Columns(columns...).Values(values...).ToSQL()
	fmt.Println(query)
	fmt.Println(args)
	result, err := q.adapter.Exec(query, args...)
	if err != nil {
		return 0, err
	}
	return result, err
}

func (q *ModelQuery) DeleteAll() (int64, error) {
	query, args := q.selectStatement.Delete().ToSQL()
	result, err := q.adapter.Exec(query, args...)
	if err != nil {
		return 0, err
	}
	return result, err
}
