// Code generated by queryx, DO NOT EDIT.

package queryx

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"strconv"
)

type Integer struct {
	Val   int32
	Valid bool
	Set   bool
}

func NewInteger(v int32) Integer {
	return Integer{Val: v, Valid: true, Set: true}
}

func NewNullableInteger(v *int32) Integer {
	if v != nil {
		return NewInteger(*v)
	}
	return Integer{Set: true}
}

// Scan implements the Scanner interface.
func (i *Integer) Scan(value interface{}) error {
	n := sql.NullInt64{}
	err := n.Scan(value)
	if err != nil {
		return err
	}
	i.Val, i.Valid = int32(n.Int64), n.Valid
	return nil
}

// Value implements the driver Valuer interface.
func (i Integer) Value() (driver.Value, error) {
	if !i.Valid {
		return nil, nil
	}
	return int64(i.Val), nil
}

// MarshalJSON implements the json.Marshaler interface.
func (i Integer) MarshalJSON() ([]byte, error) {
	if !i.Valid {
		return json.Marshal(nil)
	}
	return json.Marshal(i.Val)
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (i *Integer) UnmarshalJSON(data []byte) error {
	i.Set = true
	s := string(data)
	if s == "null" {
		return nil
	}
	i.Valid = true
	p, err := strconv.ParseInt(s, 10, 32)
	if err != nil {
		return err
	}
	i.Val = int32(p)
	return nil
}

// String implements the stringer interface.
func (i Integer) String() string {
	if !i.Valid {
		return "null"
	}
	return strconv.Itoa(int(i.Val))
}
