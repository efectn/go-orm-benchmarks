// Code generated by queryx, DO NOT EDIT.

package queryx

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"strconv"
)

type BigInt struct {
	Val   int64
	Valid bool
	Set   bool
}

func NewBigInt(v int64) BigInt {
	return BigInt{Val: v, Valid: true, Set: true}
}

func NewNullableBigInt(v *int64) BigInt {
	if v != nil {
		return NewBigInt(*v)
	}
	return BigInt{Set: true}
}

// Scan implements the Scanner interface.
func (b *BigInt) Scan(value interface{}) error {
	n := sql.NullInt64{}
	err := n.Scan(value)
	if err != nil {
		return err
	}
	b.Val, b.Valid = n.Int64, n.Valid
	return nil
}

// Value implements the driver Valuer interface.
func (b BigInt) Value() (driver.Value, error) {
	if !b.Valid {
		return nil, nil
	}
	return b.Val, nil
}

// MarshalJSON implements the json.Marshaler interface.
func (b BigInt) MarshalJSON() ([]byte, error) {
	if !b.Valid {
		return json.Marshal(nil)
	}
	return json.Marshal(b.Val)
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (b *BigInt) UnmarshalJSON(data []byte) error {
	b.Set = true
	if string(data) == "null" {
		return nil
	}
	b.Valid = true
	if err := json.Unmarshal(data, &b.Val); err != nil {
		return err
	}
	return nil
}

// String implements the stringer interface.
func (b BigInt) String() string {
	if !b.Valid {
		return "null"
	}
	return strconv.FormatInt(b.Val, 10)
}
