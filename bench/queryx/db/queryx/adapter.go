// Code generated by queryx, DO NOT EDIT.

package queryx

import (
	"regexp"
	"strconv"
	"strings"

	_ "github.com/lib/pq"
)

func (a *Adapter) Exec(query string, args ...interface{}) (int64, error) {
	matched1, err := regexp.MatchString(`.* IN (.*?)`, query)
	if err != nil {
		return 0, err
	}
	matched2, err := regexp.MatchString(`.* in (.*?)`, query)
	if err != nil {
		return 0, err
	}
	if matched1 || matched2 {
		query, args, err = In(query, args...)
		if err != nil {
			return 0, err
		}
	}
	query, args = rebind(query, args)
	result, err := a.db.Exec(query, args...)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

func rebind(query string, args []interface{}) (string, []interface{}) {
	rqb := make([]byte, 0, len(query)+10)
	var i, j int
	for i = strings.Index(query, "?"); i != -1; i = strings.Index(query, "?") {
		rqb = append(rqb, query[:i]...)
		rqb = append(rqb, '$')
		j++
		rqb = strconv.AppendInt(rqb, int64(j), 10)
		query = query[i+1:]
	}
	query = string(append(rqb, query...))
	return query, args
}
