// Code generated by queryx, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"

	"github.com/efectn/go-orm-benchmarks/bench/queryx/db/queryx"
)

type Model struct {
	ID      int64          `json:"id" db:"id"`
	Name    queryx.String  `json:"name" db:"name"`
	Title   queryx.String  `json:"title" db:"title"`
	Fax     queryx.String  `json:"fax" db:"fax"`
	Web     queryx.String  `json:"web" db:"web"`
	Age     queryx.BigInt  `json:"age" db:"age"`
	Right   queryx.Boolean `json:"right" db:"right"`
	Counter queryx.Integer `json:"counter" db:"counter"`

	schema  *queryx.Schema
	queries Queries
}

// String implements the stringer interface.
func (m *Model) String() string {
	var sb strings.Builder
	sb.WriteString("(Model ")
	sb.WriteString(fmt.Sprintf("id: %v", m.ID))
	sb.WriteString(", ")
	sb.WriteString(fmt.Sprintf("name: %s", m.Name))
	sb.WriteString(", ")
	sb.WriteString(fmt.Sprintf("title: %s", m.Title))
	sb.WriteString(", ")
	sb.WriteString(fmt.Sprintf("fax: %s", m.Fax))
	sb.WriteString(", ")
	sb.WriteString(fmt.Sprintf("web: %s", m.Web))
	sb.WriteString(", ")
	sb.WriteString(fmt.Sprintf("age: %s", m.Age))
	sb.WriteString(", ")
	sb.WriteString(fmt.Sprintf("right: %s", m.Right))
	sb.WriteString(", ")
	sb.WriteString(fmt.Sprintf("counter: %s", m.Counter))
	sb.WriteString(")")
	return sb.String()
}

func (m *Model) applyChange(change *queryx.ModelChange) error {
	if change == nil {
		return nil
	}
	if change.ID.Set {
		m.ID = change.ID.Val
	}
	if change.Name.Set {
		m.Name = change.Name
	}
	if change.Title.Set {
		m.Title = change.Title
	}
	if change.Fax.Set {
		m.Fax = change.Fax
	}
	if change.Web.Set {
		m.Web = change.Web
	}
	if change.Age.Set {
		m.Age = change.Age
	}
	if change.Right.Set {
		m.Right = change.Right
	}
	if change.Counter.Set {
		m.Counter = change.Counter
	}
	return nil
}
func (m *Model) Update(change *queryx.ModelChange) error {
	_, err := m.queries.QueryModel().Where(m.schema.And(m.schema.ModelID.EQ(m.ID))).UpdateAll(change)
	if err != nil {
		return err
	}

	return m.applyChange(change)
}

func (m *Model) Delete() error {
	_, err := m.queries.QueryModel().Delete(m.ID)
	return err
}
