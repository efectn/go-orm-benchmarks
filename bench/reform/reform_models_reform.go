// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package reform

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type reformModelsTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *reformModelsTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("models").
func (v *reformModelsTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *reformModelsTableType) Columns() []string {
	return []string{
		"id",
		"name",
		"title",
		"fax",
		"web",
		"age",
		"right",
		"counter",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *reformModelsTableType) NewStruct() reform.Struct {
	return new(ReformModels)
}

// NewRecord makes a new record for that table.
func (v *reformModelsTableType) NewRecord() reform.Record {
	return new(ReformModels)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *reformModelsTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// ReformModelsTable represents models view or table in SQL database.
var ReformModelsTable = &reformModelsTableType{
	s: parse.StructInfo{
		Type:    "ReformModels",
		SQLName: "models",
		Fields: []parse.FieldInfo{
			{Name: "ID", Type: "int", Column: "id"},
			{Name: "Name", Type: "string", Column: "name"},
			{Name: "Title", Type: "string", Column: "title"},
			{Name: "Fax", Type: "string", Column: "fax"},
			{Name: "Web", Type: "string", Column: "web"},
			{Name: "Age", Type: "int32", Column: "age"},
			{Name: "Right", Type: "bool", Column: "right"},
			{Name: "Counter", Type: "int64", Column: "counter"},
		},
		PKFieldIndex: 0,
	},
	z: new(ReformModels).Values(),
}

// String returns a string representation of this struct or record.
func (s ReformModels) String() string {
	res := make([]string, 8)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Name: " + reform.Inspect(s.Name, true)
	res[2] = "Title: " + reform.Inspect(s.Title, true)
	res[3] = "Fax: " + reform.Inspect(s.Fax, true)
	res[4] = "Web: " + reform.Inspect(s.Web, true)
	res[5] = "Age: " + reform.Inspect(s.Age, true)
	res[6] = "Right: " + reform.Inspect(s.Right, true)
	res[7] = "Counter: " + reform.Inspect(s.Counter, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *ReformModels) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Name,
		s.Title,
		s.Fax,
		s.Web,
		s.Age,
		s.Right,
		s.Counter,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *ReformModels) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Name,
		&s.Title,
		&s.Fax,
		&s.Web,
		&s.Age,
		&s.Right,
		&s.Counter,
	}
}

// View returns View object for that struct.
func (s *ReformModels) View() reform.View {
	return ReformModelsTable
}

// Table returns Table object for that record.
func (s *ReformModels) Table() reform.Table {
	return ReformModelsTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *ReformModels) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *ReformModels) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *ReformModels) HasPK() bool {
	return s.ID != ReformModelsTable.z[ReformModelsTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.ID = pk.
func (s *ReformModels) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = ReformModelsTable
	_ reform.Struct = (*ReformModels)(nil)
	_ reform.Table  = ReformModelsTable
	_ reform.Record = (*ReformModels)(nil)
	_ fmt.Stringer  = (*ReformModels)(nil)
)

func init() {
	parse.AssertUpToDate(&ReformModelsTable.s, new(ReformModels))
}
